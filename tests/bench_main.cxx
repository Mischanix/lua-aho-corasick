#include <stdio.h>
#include <string.h>
#include <vector>
#include <string>
#include "ac.h"
#include "ac_util.hpp"
#include "test_base.hpp"

#include <chrono>

using namespace std;

// simple benchmark
int main (int argc, char** argv) {
  const char *bytes = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36";
  const char *match_bytes = "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)";
  size_t bytes_len = strlen(bytes);
  size_t match_bytes_len = strlen(match_bytes);
  const char *dictionary[] = {
    // The usual suspects
    "Googlebot", "bingbot", "msnbot", "Yandex", "Baiduspider", "Yeti"
    // and some filtered sqlite source code (it's public domain!)
    // "((((u64)0xffffffff)<<32)|0xffffffff)", "(((u64)0x7fffffff)<<32)", "((int)pMem->z[i]", "((P)->flags&MEM_Ephem)!=0", "((pOp->p5", "((pOp->p5==OE_Replace)", "((t>=12", "((type1|type2)&MEM_Real)==0", "((x)->pSorter!=0)", "(*ctx.pFunc->xFunc)(&ctx,", "(++cnt<100)){", "(++pRec)<=pLast", "(--pRec)>=pData0", "64-iB);", "9223372036854775807)", "(apArg[0]->flags&MEM_Null)", "(B-Tree", "(because", "(BtCursor*)", "(bytes)", "(commit)", "(ctx.pFunc->xStep)(&ctx,", "(db->autoCommit==0", "(db->flags", "(db->flags&SQLITE_InternChanges)!=0", "(deferred", "(delete,", "(different", "(double)(iB", "(double)0", "(either", "(eNew!=eOld)", "(eNew==PAGER_JOURNALMODE_WAL", "(eOld==PAGER_JOURNALMODE_WAL", "(false)", "(flags1", "(flags1&MEM_Null)!=0", "(flags1&MEM_TypeMask);", "(flags3&MEM_Cleared)==0", "(flags3&MEM_Null)!=0", "(flags3&MEM_TypeMask);", "(i64)aRes[i]);", "(i64)rA;", "(i64)rB;", "(iMeta!=pOp->p3", "(immediate", "(in-memory)", "(indicating", "(int)nByte+2,", "(int)nByte,", "(int)nByte;", "(int)nVmStep;", "(int)pArgc->u.i;", "(int)pIn1->u.i;", "(int)pIn2->u.i;", "(int)pIn3->u.i);", "(int)pIn3->u.i;", "(int)pnErr->u.i,", "(int)pQuery->u.i;", "(int)sqlite3VdbeIntValue(&pIn1[j]);", "(interpreted", "(isBtreeCursor?sqlite3BtreeCursorSize():0);", "(len=P1)", "(MAX_ROWID>>1);", "(Mem*)pVal;", "(MEM_Blob|MEM_Str)", "(MEM_Blob|MEM_Str))==0", "(MEM_Dyn|MEM_Ephem))==0", "(MEM_Int|MEM_Real)", "(MEM_Int|MEM_Real);", "(MEM_Int|MEM_Str))==(MEM_Int|MEM_Str)", "(MEM_Null|MEM_Cleared)", "(MEM_Static|MEM_Dyn))==0", "(MEM_Static|MEM_Ephem))==0", "(MEM_Str|MEM_Blob)", "(MEM_Str|MEM_Blob))!=0", "(MEM_Str|MEM_Blob))==0", "(n--)==0", "(Number", "(nVmStep%db->nProgressOps);", "(OE_Replace,", "(offset", "(OP_IdxGE&1)==(OP_IdxGT&1)", "(OP_IdxLE&1)==(OP_IdxLT&1)", "(OP_Next,", "(OP_NotExists)", "(OP_SeekLE", "(OP_SeekLT", "(OPFLAG_LENGTHARG|OPFLAG_TYPEOFARG))!=0", "(OPFLG_OUT2_PRERELEASE|OPFLG_OUT2)", "(otherwise", "(p->cacheCtr", "(p->db->flags", "(p->flags", "(p->nMem)", "(p->nMem-1),", "(p->rc&0xff)==SQLITE_CONSTRAINT", "(P3+P2-1)", "(P3=P2/P1).", "(P4_INT32)", "(P4_KEYINFO).", "(parent)", "(payloadSize64", "(pDest->flags", "(Perhaps", "(pIn1->flags", "(pIn1->flags&MEM_Blob)>>3;", "(pIn1->flags&~MEM_TypeMask)", "(pIn2->flags", "(pIn3->flags", "(pIn3->flags&~MEM_TypeMask)", "(pKeyInfo", "(pMem->flags", "(pMem[i].flags", "(pnErr->flags", "(pOp->opcode&1)==(OP_IdxLT&1)", "(pOp->opflags", "(pOp->p2>0", "(pOp->p3", "(pOp->p3)", "(pOp->p4.z", "(pOp->p5", "(pOp->p5!=BTREE_UNORDERED);", "(pOp->p5&(OPFLAG_P2ISREG|OPFLAG_BULKCSR))==pOp->p5", "(pOp->p5&OPFLAG_CLEARCACHE)!=0", "(pOut->flags", "(pOut->flags|MEM_Null)&~MEM_Undefined;", "(pQuery->flags&MEM_Int)!=0", "(pRec->flags&(MEM_Real|MEM_Int))", "(pRec->flags&MEM_Str)==0", "(pRt->flags&MEM_Frame)==0", "(rc&0xff)==SQLITE_CONSTRAINT", "(rc&0xFF)==SQLITE_LOCKED", "(res==0", "(res==0)", "(res==0);", "(res==1", "(returned", "(signified", "(similar", "(sqlite3.xUpdateCallback)", "(sqlite3_module", "(sqlite3Strlen30(zFilename)==0", "(SQLITE_VdbeListing|SQLITE_VdbeEQP|SQLITE_VdbeTrace))!=0", "(t&1)==0)", "(typically", "(u16)nField;", "(u16)pFrame->nChildCsr;", "(u16)pOp->p3;", "(u16)pOp->p4.i;", "(u32)(zHdr", "(u32)avail", "(u32)db->aLimit[SQLITE_LIMIT_LENGTH]", "(u32)n64;", "(u32)payloadSize64;", "(u64)0xffffffff", "(u64)iKey,", "(u64)v,", "(u8)(1-desiredAutoCommit);", "(u8)desiredAutoCommit;", "(u8)pIn3->u.i;", "(u8)pOp->p2;", "(u8)pOp->p3;", "(u8)res;", "(u8*)&payloadSize64", "(u8*)pReg->z;", "(u8*)sMem.z;", "(unsigned)db->nProgressOps;", "(unsigned)p->aCounter[SQLITE_STMTSTATUS_VM_STEP];", "(unsigned)pOp->p3", "(unsigned)pOp->p3;", "(VdbeCursor", "(VdbeCursor*)pMem->z;", "(WARNING/TODO:", "(zHdr==zEndHdr", "(zTrace", "/*****************************************************************************", "/*NO_TEST*/", "0==(db->flags&SQLITE_ReadUncommitted)", "0==(pRec->flags&MEM_Str)", "0==FALSE,", "0==sqlite3Atoi64(pRec->z,", "0x0001)", "0x0001)==(OP_SeekGE", "0x0001)==(OP_SeekGT", "0x0001)==(OP_SeekLT", "0x7fffffff", "0x7fffffffffffffff.", "0x7ffffffffffffffffLL.", "0xFF));", "0xffffff;", "1))!=SQLITE_OK", "1-alreadyExists;", "1==TRUE,", "32768*3", "abort_due_to_error:", "abort_due_to_error;", "abort_due_to_interrupt:", "abort_due_to_interrupt;", "accomplished", "according", "accum=r[P1]", "accum=r[P3]", "accumulator", "accumulator.", "acquired", "acquired.", "action,", "actions", "active,", "active.", "actually", "additional", "address", "Advance", "advance", "advanced", "affinities", "affinity", "Affinity", "affinity!=SQLITE_AFF_NONE", "affinity(r[P1@P2])", "affinity,", "affinity.", "affinity;", "affinity==SQLITE_AFF_INTEGER", "affinity==SQLITE_AFF_NUMERIC", "affinity==SQLITE_AFF_REAL", "affinity==SQLITE_AFF_TEXT", "aforementioned", "afterwards", "against", "AggFinal", "aggregate", "aggregate.", "AggStep", "algorithm", "algorithm).", "algorithm.", "Allocate", "allocate", "allocateCursor(p,", "allocated", "allocated,", "allocated.", "allocating", "allocation", "allocation.", "allocations", "allocations.", "allowed", "already", "already.", "alreadyExists", "alreadyExists;", "alternative", "ALWAYS(iSrcLine>0)", "ALWAYS(pModule->xUpdate)", "aMem[pOp->p3].u.i", "amount,", "analysis", "and_logic[]", "and_logic[v1*3+v2];", "Another", "another", "another,", "anyhow,", "anything", "aOffset", "aOffset[0]", "aOffset[0],", "aOffset[0];", "aOffset[]", "aOffset[i]", "aOffset[i];", "aOffset[p2+1],", "aOffset[p2],", "aOp[i].opcode==OP_Explain", "aOp[i].p4.z);", "apArg);", "apArg[0]", "apArg[i]", "aPermute", "aPermute[i]", "aPermute[k];", "aPermute[k]>mx", "app-defined", "appears", "append.", "applied", "applies", "applyAffinity(", "applyAffinity((Mem", "applyAffinity()", "applyAffinity().", "applyAffinity(pIn1,", "applyAffinity(pIn3,", "applyAffinity(pRec++,", "applyNumericAffinity(),", "applyNumericAffinity(Mem", "ApplyNumericAffinity(pIn3);", "applyNumericAffinity(pMem);", "ApplyNumericAffinity(pRec);", "ApplyNumericAffinity(X)", "appropriate", "appropriate.", "appropriately.", "approximation", "apVal);", "apVal[i]", "arbitrary", "aRes[0]", "aRes[1]", "aRes[2]", "aRes[3];", "argument", "argument.", "arguments", "arguments.", "argv[0]", "argv[1]", "arithmetic_result_is_null:", "arithmetic_result_is_null;", "aRoot);", "aRoot==0", "aRoot[j]", "Arrange", "aspects", "assembler", "assert(", "assert()", "assert(pVtab", "assertion", "assigned", "associated", "assumed", "Assuming", "aTempRec,", "aTempRec[ROUND8(sizeof(UnpackedRecord))", "attached", "attempt", "attempt,", "attempts", "aType[].", "aType[i]", "aType[p2]", "aType[p2],", "aType[p2];", "auto-commit", "AutoCommit", "autocommit", "AUTOINCREMENT", "automatically", "automatically.", "AUTOVACUUM", "auxiliary", "avail<=65536", "avail<offset", "available", "available)", "avoiding", "azType[]", "azType[pOp->p5-1];", "B-Tree.", "backwards", "Because", "because", "becomes", "before,", "begining", "beginning", "beginning.", "behaves", "behavior", "belongs", "between", "bIntint", "bIntint;", "bit-wise", "bitmask", "blessing:", "BLOB_INTKEY", "boolean", "BtCursor", "btree.h.", "BTREE_*", "BTREE_BLOBKEY", "BTREE_BLOBKEY;", "BTREE_INTKEY;", "BTREE_OMIT_JOURNAL", "BTREE_SCHEMA_VERSION,", "BTREE_SINGLE", "BtreeLast()", "buffers", "builds.", "built-in", "bytecode", "c>=0x20", "CACHE_STALE;", "callback", "callback,", "callback.", "callbacks.", "called).", "called.", "calling", "candidate", "change)", "change.", "changed", "changed,", "changed.", "changes", "changes,", "changes.", "changing", "character", "characters", "check_for_interrupt:", "check_for_interrupt;", "checked", "checking", "Checkpoint", "checkpoint", "checkpointed", "checkpoints", "checkSavepointCount(db)", "checkSavepointCount(sqlite3", "clear).", "cleared", "cleared.", "clobber", "closed.", "collating", "Collating", "collation", "collision", "CollSeq", "column.", "columns", "columns.", "Combined", "combined", "command", "command,", "command-line", "comment", "commenting", "comments", "committed.", "compare", "Compare", "compared", "compared.", "compares", "comparison", "comparison,", "comparison.", "compatibility", "compile", "compiler", "compilers", "complain", "complement", "complete", "completes", "completion.", "complicated.", "Compute", "computed", "computes", "conditional", "configured", "conflict", "CONFLICT", "connection", "considered", "consistent", "constant", "constant.", "constants", "constraint", "constraint-counter", "constraints).", "constraints,", "construct", "constructed", "contain", "contained", "containing", "contains", "content", "Content", "content.", "contents", "contiguous", "continue", "continue;", "continuing", "contraint", "control", "Control", "controls.", "convenient", "convention", "conventions,", "conversion", "conversions", "Convert", "convert", "converted", "converted)", "converts", "copyright", "coroutine", "coroutine.", "correct", "correctly", "correctly.", "corresponding", "corresponds", "corrupt", "corruption", "counter", "Counter", "counter,", "counter.", "counting", "coverage", "created", "created.", "CreateIndex", "CreateTable", "ctx.fErrorOrAux", "ctx.iOp", "ctx.isError", "ctx.isError;", "ctx.pColl", "ctx.pFunc", "ctx.pFunc->funcFlags", "ctx.pMem", "ctx.pVdbe", "ctx.s.db", "ctx.s.flags", "ctx.s.xDel", "ctx.s.z", "ctx.s.zMalloc", "ctx.skipFlag", "current", "Current", "currently", "cursor)", "cursor,", "cursor.", "CursorMoveto()", "cursors", "cursors,", "effect.", "efficiency,", "efficient", "element", "elements", "emitted", "ENABLE_MEMORY_MANAGEMENT,", "enabled", "enabled.", "ENC(db);", "enc)==0", "encnames[]", "encnames[pMem->enc]);", "encoding", "encoding!=SQLITE_UTF8", "encoding)", "encoding);", "encoding;", "encountered,", "encountered.", "EndCoroutine", "EndCoroutine,", "endTime", "endTime>start", "eNew==PAGER_JOURNALMODE_DELETE", "eNew==PAGER_JOURNALMODE_MEMORY", "eNew==PAGER_JOURNALMODE_OFF", "eNew==PAGER_JOURNALMODE_PERSIST", "eNew==PAGER_JOURNALMODE_QUERY", "eNew==PAGER_JOURNALMODE_TRUNCATE", "eNew==PAGER_JOURNALMODE_WAL", "eNew==PAGER_JOURNALMODE_WAL)", "entries", "eOld==PAGER_JOURNALMODE_MEMORY", "eOld==PAGER_JOURNALMODE_WAL", "ephemeral", "ephemeral.", "equivalent", "errors,", "errors.", "eType==SQLITE_TEXT", "evaluator", "everything", "exactly", "exceeds", "exception", "exception),", "exception.", "exceptions", "EXCLUSIVE", "Execute", "execute", "executed", "executed.", "executing", "execution", "existing", "exists.", "exists;", "ExpandBlob(&r.aMem[ii]);", "ExpandBlob(pIn1)", "ExpandBlob(pIn1);", "ExpandBlob(pIn2)", "ExpandBlob(pIn2);", "ExpandBlob(pIn3);", "ExpandBlob(r.aMem);", "expanded", "expire.", "expired", "expired.", "EXPLAIN", "Explain", "explain==2", "Exported", "expression.", "external", "Extract", "extract", "extracted", "extracting", "extraction", "f&MEM_Blob", "facility", "failed,", "failed.", "failed:", "failure", "failure,", "faster:", "feature", "feature.", "fields,", "file_format", "file_format);", "file_format;", "filtered", "filtering", "finalizer", "finished", "finished,", "FkCounter", "fkctr[P1]+=P2", "fkctr[P1]==0", "FkIfZero", "flags);", "flags1;", "flags3)&MEM_Null", "flags3;", "floating", "floating-point", "flush-left.", "followed", "following", "follows", "follows,", "for(;;)", "for(i=0,", "for(i=0;", "for(iDb=0;", "for(ii=0;", "for(j=0;", "for(k=0;", "for(p=db->pSavepoint;", "for(pc=p->pc;", "for(pFrame=p->pFrame;", "for(pMem=VdbeFrameMem(pFrame);", "for(pVdbe=db->pVdbe;", "forcing", "foreign", "FOREIGN", "forgive", "forgiveness", "format.", "format]", "formatting", "Formatting", "forward", "fp_math:", "fp_math;", "fractional", "freely,", "func.c.", "FuncDef", "function", "Function", "function)", "function,", "function.", "functionality", "functions", "functions.", "Furthermore,", "generate", "generated", "generated.", "generates", "generation", "generator", "generator.", "getVarint32()", "getVarint32(pC->aRow,", "greater", "greater,", "growable", "guarantee", "guaranteed", "Guaranteed", "habits.", "halted.", "HaltIfNull", "handle's", "handles", "handles).", "happens", "happens.", "hdr-size", "header,", "header.", "headers", "high-performance", "holding", "Holding", "However", "However,", "hwtime.h", "i<db->nDb;", "i<nArg;", "i<p->nOp;", "i<pKeyInfo->nField", "i<pMem->n;", "i<pOp->p2;", "i<r.nField;", "i==nHdr", "iB==SMALLEST_INT64", "iB>(-64)", "iCnt++;", "iCnt==1", "iCompare", "iCompare<0", "iCompare==0", "iCookie", "iCookie,", "iCookie;", "iCur<p->nCursor", "iDb++){", "iDb<db->nDb", "iDb<db->nDb;", "identified", "identifier", "Identify", "identifying", "IdxDelete", "IdxInsert", "IdxRowid", "if(((P)->flags&(MEM_Str|MEM_Blob))==0", "if(((X)->flags&(MEM_Real|MEM_Int))==0){applyNumericAffinity(X);}", "if(db->flags&SQLITE_VdbeTrace)registerTrace(R,M)", "iGen!=pOp->p4.i)", "ignored)", "ignored.", "ignoring", "ii<db->nDb;", "ii<r.nField;", "illegal", "immediate", "immediately", "immediately.", "iMoved!=0", "iMoved,", "iMoved;", "implement", "implementation", "IMPLEMENTATION-OF:", "implementation.", "implemented", "implementing", "implements", "implied", "important", "important.", "impossible", "improve", "in-memory", "include:", "including", "inclusive,", "Increment", "incremental", "incremented", "incremented.", "increments", "IncrVacuum", "indentation", "indentation.", "indented", "index).", "indicates", "indicating", "indices", "Indices", "indices.", "individual", "information", "information,", "information.", "InitCoroutine", "InitData", "initData.db", "initData.iDb", "initData.pzErrMsg", "initData.rc", "initData.rc;", "initData;", "initial", "initialization", "initialize", "Initialize", "initialized", "initialized.", "initializes", "initially", "inputs.", "insert.", "inserted", "inserted,", "inserted.", "InsertInt", "instance", "instead", "Instead,", "instruct.", "instruction", "Instruction", "instruction,", "instruction.", "instructions", "instructions.", "integer", "INTEGER", "Integer", "integer)", "integer,", "integer.", "integers", "integers,", "integers.", "integrity_check", "IntegrityCk", "interface", "interface,", "intermediate", "internal", "internally", "Interpret", "interpretation", "interpreted", "interrupt", "interrupt.", "intervening", "intkey=P3", "intkey=r[P2]", "intkey=r[P3]", "invalid.", "Invalidate", "invalidate", "invalidated", "invocation", "invocation.", "invoked", "invoked,", "invoked.", "invokes", "invoking", "iplan=r[P3]", "iQuery,", "iQuery;", "iRollback", "iRollback;", "iRollback==0", "irrelevant", "iSavepoint", "iSavepoint);", "iSavepoint++;", "iSavepoint;", "isBtreeCursor", "iSet==-1", "iSet>=0", "iSrcLine,", "iSrcLine,I,M);", "iSrcLine;", "iSrcLine<=2", "isSorter(pC)", "isSorter(pC)==(pOp->opcode==OP_SorterInsert)", "isSorter(pC)==(pOp->opcode==OP_SorterSort)", "isSorter(pC)==0", "isSorter(x)", "isTransaction", "isWriteLock", "isWriteLock);", "isWriteLock==0", "isWriteLock==1", "iterate", "itself.", "iValue;", "keeping", "key(P1)!=rtrim(r[P3],P4)", "key/data", "key/value", "key=r[P2@P3]", "key=r[P2]", "key=r[P3@P4]", "KeyInfo", "keywords", "Keywords", "knowing", "largest", "lastRowid", "lastRowid;", "launched", "leaving", "left-most", "length()", "length(X)", "library.", "lifetime", "literal", "LoadAnalysis", "loading", "located", "location", "locked.", "locked:", "logical", "looking", "machine", "machine,", "machine.", "machines", "makefile", "MakeRecord", "MakeRecord.", "malloc()", "managed", "mapping", "margin.", "massive", "MASTER_ROOT,", "matches", "matches,", "matching", "MAX_ROWID", "maximum", "Maximum", "maximum,", "maximum.", "MaxPgcnt", "mechanism", "mem(P3)", "mem[p2]", "mem[P3+1]", "mem[P3+2]", "mem[P3+2].", "mem[P3]", "MEM_Blob", "MEM_Blob)", "MEM_Blob);", "MEM_Blob)==0", "MEM_Blob;", "MEM_Cleared", "MEM_Cleared)==0", "MEM_Dyn", "MEM_Ephem", "MEM_Ephem);", "MEM_Ephem)==0", "MEM_Frame;", "MEM_Int", "MEM_Int)!=0", "MEM_Int);", "MEM_Int)==0", "MEM_Int.", "MEM_Int;", "MEM_Null", "MEM_Null)!=0", "MEM_Null)!=0,", "MEM_Null);", "MEM_Null)==0", "MEM_Null)==0,", "MEM_Null;", "MEM_Real", "MEM_Real);", "MEM_Real)==0", "MEM_Real;", "MEM_RowSet", "MEM_RowSet)==0", "MEM_Static", "MEM_Static);", "MEM_Static;", "MEM_Str", "MEM_Str);", "MEM_Str==(MEM_Blob>>3)", "MEM_Str|MEM_Static|MEM_Term;", "MEM_Term;", "MEM_Undefined", "MEM_Undefined;", "MEM_Zero", "MEM_Zero)==0", "MEM_Zero;", "memAboutToChange(p,", "memAboutToChange(P,M)", "memcmp()", "memcpy(&ctx.s,", "memcpy(&iA,", "memcpy(&pOut->z[pIn2->n],", "memcpy(&uA,", "memcpy().", "memcpy(pNew->zName,", "memcpy(pOut,", "memcpy(pOut->z,", "memIsValid(&aMem[p1+idx])", "memIsValid(&aMem[p2+idx])", "memIsValid(&aMem[pOp->p1])", "memIsValid(&aMem[pOp->p2])", "memIsValid(&aMem[pOp->p3])", "memIsValid(&pMem[i])", "memIsValid(&r.aMem[i])", "memIsValid(&r.aMem[ii])", "memIsValid(pArg)", "memIsValid(pData)", "memIsValid(pIn1)", "memIsValid(pIn2)", "memIsValid(pKey)", "memIsValid(pMem)", "memIsValid(pName)", "memIsValid(pQuery)", "memIsValid(pRec)", "memIsValid(pReg)", "memIsValid(pX)", "memory),", "memory.", "memset(&sContext,", "memset(&sMem,", "memset(p->aOnceFlag,", "memset(pCx,", "MemSetTypeFlag(&ctx.s,", "MemSetTypeFlag(&sContext.s,", "MemSetTypeFlag(pDest,", "MemSetTypeFlag(pIn1,", "MemSetTypeFlag(pOut,", "memTracePrint(Mem", "memTracePrint(p);", "merge-sort", "message", "method.", "methods", "minimizes", "minimum", "misused.", "mkopcodeh.awk", "modified", "modified.", "modifies", "modifying", "module.", "movement", "multi-value", "multiple", "Multiply", "MustBeInt", "mutexes", "64>db->aLimit[SQLITE_LIMIT_LENGTH]", "n==(db->nSavepoint", "n>(u32)db->aLimit[SQLITE_LIMIT_LENGTH]", "nByte);", "nByte>db->aLimit[SQLITE_LIMIT_LENGTH]", "nChange", "nChange;", "nColumn=P2", "needed.", "negative", "negative.", "neither", "Neither", "nEntry;", "nErr==0", "nested,", "NEVER(p2<2)", "NEVER(pC->pCursor==0)", "NEVER(rc!=SQLITE_OK)", "NEVER(rc)", "newMax);", "newMax;", "NewRowid", "next_tail:", "next_tail;", "NextIfOpen", "nField,", "nField;", "nField==0", "nField>0", "nField>=0", "nHdr++;", "nHdr+nData;", "nHdr<=126", "nHdr==126", "nHdr==127", "nHdrParsed", "nIgnore", "nIgnore,", "nIgnore;", "nName+1);", "no_mem:", "no_mem;", "no_mem;}", "NoConflict", "NoConflict,", "non-negative", "non-negative.", "non-transaction", "non-zero", "non-zero,", "non-zero.", "nonzero", "not-NULL", "NotExists", "NotExists,", "NotExists.", "NotFound", "NotFound,", "nothing", "Nothing", "nothing.", "notice,", "NotNull", "nProgressLimit", "nProgressLimit==0", "nRoot>0", "nullFlag", "nullFlag;", "nullif()", "NullRow", "number,", "number.", "number.)", "numbers", "numbers,", "numeric", "Numeric", "numeric,", "numericType(Mem", "numericType(pIn1);", "numericType(pIn2);", "nVarint", "nVarint;", "nVarint<sqlite3VarintLen(nHdr)", "nVmStep", "nVmStep++;", "nVmStep>0", "nVmStep>=nProgressLimit", "object,", "object.", "obtained", "obtained.", "oc!=OP_SeekGE", "oc!=OP_SeekGT", "oc!=OP_SeekLE", "oc!=OP_SeekLT", "oc==OP_SeekGE", "oc==OP_SeekGT", "oc==OP_SeekGT)", "oc==OP_SeekLE", "oc==OP_SeekLT", "oc==OP_SeekLT)", "oc>=OP_SeekGE", "occurred", "occurring", "occurs,", "occurs.", "OE_Abort", "OE_Abort;", "OE_Fail,", "OE_Ignore,", "offset!=pC->payloadSize)", "offset);", "offset;", "offset<szField", "omitted", "omitted.", "ones-complement", "op==OP_BitAnd", "op==OP_BitOr", "op==OP_ShiftLeft", "op==OP_ShiftLeft)", "op==OP_ShiftRight", "OP_Add:", "OP_AddImm:", "OP_Affinity:", "OP_AggFinal:", "OP_AggStep:", "OP_And:", "OP_AutoCommit:", "OP_BitAnd:", "OP_BitNot:", "OP_BitOr:", "OP_Blob:", "OP_Checkpoint:", "OP_Clear:", "OP_Close:", "OP_CollSeq:", "OP_Column", "OP_Column:", "op_column_error:", "op_column_error;", "op_column_out:", "op_column_out;", "OP_Compare", "OP_Compare.", "OP_Compare:", "OP_Concat:", "OP_Copy", "OP_Copy:", "OP_Count:", "OP_CreateIndex:", "OP_CreateTable", "OP_CreateTable:", "OP_Delete", "OP_Delete:", "OP_Destroy", "OP_Destroy:", "OP_Divide:", "OP_DropIndex:", "OP_DropTable:", "OP_DropTrigger:", "OP_EndCoroutine:", "OP_Expire:", "OP_Explain", "OP_FkCounter:", "OP_FkIfZero:", "OP_FkIsZero", "OP_Found", "OP_Found:", "OP_Function:", "OP_Gosub:", "OP_Goto:", "OP_Halt", "OP_Halt:", "OP_HaltIfNull:", "OP_IdxDelete:", "OP_IdxGE:", "OP_IdxGT:", "OP_IdxInsert.", "OP_IdxInsert:", "OP_IdxLE:", "OP_IdxLT:", "OP_IdxRowid:", "OP_IfNeg:", "OP_IfNot:", "OP_IfPos:", "OP_IfZero:", "OP_IncrVacuum:", "OP_Init:", "OP_InitCoroutine:", "OP_Insert", "OP_Insert.", "OP_Insert:", "OP_InsertInt:", "OP_Int64:", "OP_Integer:", "OP_IntegrityCk:", "OP_IsNull:", "OP_JournalMode:", "OP_Jump", "OP_Jump:", "OP_Last", "OP_Last.", "OP_Last:", "OP_Last;", "OP_LoadAnalysis:", "OP_MakeRecord", "OP_MakeRecord:", "OP_MaxPgcnt:", "OP_MemMax:", "OP_Move:", "OP_Multiply:", "OP_MustBeInt:", "OP_NewRowid:", "OP_Next,", "OP_Next:", "OP_NextIfOpen:", "OP_NoConflict", "OP_NoConflict:", "OP_Noop", "OP_Not:", "OP_NotExists", "OP_NotExists:", "OP_NotFound", "OP_NotFound:", "OP_NotNull:", "OP_Null:", "OP_NullRow:", "OP_Once:", "OP_OpenAutoindex:", "OP_OpenEphemeral", "OP_OpenEphemeral.", "OP_OpenEphemeral:", "OP_OpenPseudo:", "OP_OpenRead", "OP_OpenRead:", "OP_OpenSorter", "OP_OpenWrite:", "OP_Pagecount:", "OP_Param:", "OP_ParseSchema:", "OP_Permutation", "OP_Permutation:", "OP_Prev", "OP_Prev,", "OP_Prev:", "OP_PrevIfOpen:", "OP_Program", "OP_Program.", "OP_Program:", "OP_ReadCookie", "OP_ReadCookie:", "OP_Real:", "OP_RealAffinity:", "OP_Remainder:", "OP_ReopenIdx:", "OP_ResetCount:", "OP_ResetSorter:", "OP_ResultRow:", "OP_Return:", "OP_Rewind", "OP_Rewind.", "OP_Rewind/Op_Next", "OP_Rewind:", "OP_Rewind;", "OP_RowData", "OP_RowData:", "OP_Rowid:", "OP_RowKey", "OP_RowKey:", "OP_RowSetAdd:", "OP_RowSetNext,", "OP_RowSetRead:", "OP_RowSetTest:", "OP_Savepoint:", "OP_SCopy,", "OP_SCopy.", "OP_SCopy:", "OP_Seek:", "OP_SeekGE", "OP_SeekGE:", "OP_SeekGE==(OP_SeekGT-1)", "OP_SeekGT", "OP_SeekGT:", "OP_SeekGT==(OP_SeekGE+1)", "OP_SeekLE", "OP_SeekLE:", "OP_SeekLE==(OP_SeekLT+1)", "OP_SeekLT))", "OP_SeekLT+1", "OP_SeekLT+2", "OP_SeekLT+3", "OP_SeekLT:", "OP_SeekLT==(OP_SeekLE-1)", "OP_SeekXX,", "OP_Sequence:", "OP_SetCookie:", "OP_ShiftLeft:", "OP_ShiftRight:", "OP_ShiftRight==OP_ShiftLeft+1", "OP_SoftNull:", "OP_Sort", "OP_Sort:", "OP_SorterCompare:", "OP_SorterData:", "OP_SorterInsert:", "OP_SorterNext)", "OP_SorterNext:", "OP_SorterOpen.", "OP_SorterOpen:", "OP_SorterSort:", "OP_String", "OP_String8:", "OP_String:", "OP_String;", "OP_Subtract:", "OP_TableLock:", "OP_ToBlob:", "OP_ToInt:", "OP_ToNumeric:", "OP_ToReal:", "OP_ToText:", "OP_Transaction:", "OP_Vacuum:", "OP_Variable:", "OP_VBegin:", "OP_VColumn:", "OP_VCreate:", "OP_VDestroy:", "OP_VFilter:", "OP_VNext,", "OP_VNext:", "OP_VOpen:", "OP_VRename:", "OP_VRowid", "OP_VUpdate:", "OP_Yield:", "opcode)", "opcode,", "opcode.", "opcode.html", "Opcode:", "opcodeProperty[].", "Opcodes", "opcodes", "opcodes.", "opcodes.c", "opcodes.h", "opcodesnever", "OpenAutoindex", "opened,", "opened.", "OpenEphemeral", "opening", "OpenPseudo", "OpenRead", "OpenRead.", "OpenWrite", "OpenWrite,", "operand", "operand:", "operands", "operated", "operation", "operation.", "operations", "operator", "operator.", "OPFLAG_APPEND)!=0,", "OPFLAG_BULKCSR));", "OPFLAG_BULKCSR==BTREE_BULKLOAD", "OPFLAG_CLEARCACHE", "OPFLAG_ISUPDATE", "OPFLAG_ISUPDATE)", "OPFLAG_LASTROWID", "OPFLAG_LENGTHARG", "OPFLAG_NCHANGE", "OPFLAG_P2ISREG", "OPFLAG_PERMUTE", "OPFLAG_PERMUTE)==0", "OPFLAG_TYPEOFARG", "OPFLAG_TYPEOFARG)!=0))", "OPFLAG_USESEEKRESULT", "OPFLAG_USESEEKRESULT)", "OPFLG_IN1)!=0", "OPFLG_IN2)!=0", "OPFLG_IN3)!=0", "OPFLG_INITIALIZER", "OPFLG_OUT2)!=0", "OPFLG_OUT2_PRERELEASE", "OPFLG_OUT3", "OPFLG_OUT3)!=0", "optimization", "optimization.", "optimizations:", "optimized", "optimizer", "optimizer.", "optimizing", "or_logic[]", "or_logic[v1*3+v2];", "ordinary", "original", "originally", "others.", "Otherwise", "Otherwise,", "out-of-date,", "out2-prerelease", "out2_prerelease,", "output.", "output=r[P1@P2]", "overflow", "overflows", "overlap.", "overlapping", "overlapping.", "oversize", "overwrite", "overwritten.", "ownership", "p->aCounter[pOp->p5]++;", "p->aCounter[SQLITE_STMTSTATUS_SORT]++;", "p->aCounter[SQLITE_STMTSTATUS_VM_STEP]", "p->aMem", "p->aMem;", "p->aOnceFlag", "p->aOnceFlag;", "p->aOnceFlag[pOp->p1]", "p->aOp;", "p->aOp[pc].p2-1;", "p->apArg;", "p->apCsr", "p->apCsr;", "p->apCsr[iCur]", "p->apCsr[iCur]);", "p->apCsr[pOp->p1]", "p->apCsr[pOp->p1]!=0", "p->apCsr[pOp->p1]);", "p->apCsr[pOp->p1]->pCursor;", "p->apCsr[pOp->p1]->seqCount++;", "p->apCsr[pOp->p1];", "p->apCsr[pOp->p1]==0", "p->bIsReader", "p->cacheCtr", "p->cacheCtr;", "p->db->flags", "p->errorAction", "p->expired", "p->explain==0", "p->flags", "p->iCurrentTime", "p->inVtabMethod", "p->iStatement", "p->iStatement);", "p->iStatement-1);", "p->iStatement==0", "p->magic==VDBE_MAGIC_RUN", "p->minWriteFileFormat", "p->minWriteFileFormat;", "p->n>sqlite3_max_blobsize", "p->nChange", "p->nChange);", "p->nChange++;", "p->nChange;", "p->nCursor", "p->nCursor;", "p->nFkConstraint", "p->nFkConstraint==0", "p->nFrame++;", "p->nFrame--;", "p->nFrame>=db->aLimit[SQLITE_LIMIT_TRIGGER_DEPTH]", "p->nMem", "p->nMem;", "p->nOnceFlag", "p->nOnceFlag);", "p->nOnceFlag;", "p->nOp;", "p->nResColumn==pOp->p2", "p->nStmtDefCons", "p->nStmtDefImmCons", "p->pc==0", "p->pFrame", "p->pFrame;", "p->pResultSet", "p->rc==SQLITE_BUSY", "p->rc==SQLITE_NOMEM", "p->rc==SQLITE_OK", "p->readOnly!=0", "p->readOnly==0", "p->u.i);", "p->usesStmtJournal", "p->zErrMsg", "p->zErrMsg);", "p->zErrMsg==0", "p->zSql))!=0", "p->zSql);", "p->zSql,", "P.z==P.zMalloc.", "1+mx<=(p->nMem-p->nCursor)+1", "1+n<=(p->nMem-p->nCursor)+1", "1+n<=p2", "1..P1+P3", "1..P1+P3-1", "1<db->nDb", "1==SAVEPOINT_BEGIN", "1==SAVEPOINT_BEGIN||p1==SAVEPOINT_RELEASE||p1==SAVEPOINT_ROLLBACK", "1==SAVEPOINT_RELEASE", "1==SAVEPOINT_ROLLBACK", "2+mx<=(p->nMem-p->nCursor)+1", "2+n<=(p->nMem-p->nCursor)+1", "2+n<=p1", "2..P2+P3-1", "2..P2+P3-1.", "2..P2+P3.", "2<=(p->nMem-p->nCursor)", "2<pC->nField", "2<pC->nHdrParsed", "2==OE_Abort,", "2==OE_Fail.", "2==OE_Rollback.", "3+2..P3+1+argc", "4_ADVANCE.", "4_DYNAMIC;", "4_KEYINFO", "4_SUBPROGRAM).", "p=p->pNext)", "Pagecount", "PAGER_JOURNALMODE_OFF);", "PAGER_JOURNALMODE_XXX", "PagerCloseWal()", "pages.)", "parameter", "Parameter", "parameter.", "parameter:", "parameters", "parent)", "pArg++){", "pArgc->flags==MEM_Int", "ParseSchema", "parsing", "particular", "payload", "payloadSize64", "payloadSize64;", "pC->aRow", "pC->aRow;", "pC->aRow==0", "pC->aType;", "pC->cacheStatus", "pC->cacheStatus!=p->cacheCtr", "pC->deferredMoveto", "pC->deferredMoveto==0", "pC->iDb>=0", "pC->iHdrOffset", "pC->iHdrOffset;", "pC->iHdrOffset<aOffset[0]", "pC->isEphemeral", "pC->isOrdered", "pC->isTable", "pC->isTable==0", "pC->isTable==0)", "pC->lastRowid", "pC->lastRowid;", "pC->movetoTarget", "pC->movetoTarget;", "pC->nField;", "pC->nHdrParsed", "pC->nHdrParsed;", "pC->nHdrParsed<=p2", "pC->nullRow", "pC->nullRow==0", "pC->payloadSize", "pC->payloadSize)", "pC->payloadSize;", "pC->pCursor", "pC->pCursor!=0", "pC->pCursor!=0);", "pC->pCursor;", "pC->pKeyInfo,", "pC->pKeyInfo;", "pC->pseudoTableReg==0", "pC->pseudoTableReg>0", "pC->pSorter", "pC->pSorter);", "pC->pVtabCursor", "pC->pVtabCursor->pVtab;", "pC->pVtabCursor==0", "pC->rowidIsValid", "pC->rowidIsValid==0", "pC->seekOp", "pC->seekOp==OP_Last", "pC->seekOp==OP_Rewind", "pC->seekOp==OP_SeekGE", "pC->seekOp==OP_SeekGT", "pC->seekOp==OP_SeekLE", "pC->seekOp==OP_SeekLT", "pC->seekResult", "pC->szRow", "pC->szRow>=aOffset[p2+1]", "pC->useRandomRowid", "pc<p->nOp", "pc==pFrame->pc", "pCaller", "pCaller->opcode==OP_Yield", "pCaller->p2", "pCaller->p2<p->nOp", "pCaller->p2>=0", "pcDest;", "pColl);", "pCrsr!=0", "pCrsr==0", "pCur->iDb==pOp->p3", "pCur->isOrdered", "pCur->isTable", "pCur->nullRow", "pCur->pCursor);", "pCur->pgnoRoot", "pCur->pgnoRoot==pOp->p2", "pCur->pKeyInfo", "pCur->pVtabCursor", "pCur->pVtabCursor->pVtab;", "pCur->pVtabCursor;", "pCur==0", "pCx->iDb", "pCx->isEphemeral", "pCx->isOrdered", "pCx->isTable", "pCx->nField", "pCx->nullRow", "pCx->pCursor", "pCx->pCursor);", "pCx->pKeyInfo", "pCx->pKeyInfo->db==db", "pCx->pKeyInfo->enc==ENC(db)", "pCx->pseudoTableReg", "pData);", "pData->flags", "pData->n", "pData->n,", "pData->u.nZero;", "pData->z", "pData->z,", "pData0;", "pData0<=pLast", "pDb->pBt!=0", "pDb->pBt;", "pDb->pSchema->file_format", "pDb->pSchema->file_format;", "pDb->pSchema->schema_cookie", "pDest);", "pDest->enc", "pDest->flags", "pDest->z", "pDest->z==sMem.z", "pDest->zMalloc", "Perform", "performance", "performance,", "performed.", "performs", "Permutation", "permutation", "persist,", "persistent", "pFrame->aMem", "pFrame->aOnceFlag", "pFrame->aOp", "pFrame->aOp[pFrame->pc].p1];", "pFrame->apCsr", "pFrame->lastRowid", "pFrame->nChange", "pFrame->nChildCsr", "pFrame->nChildMem", "pFrame->nChildMem;", "pFrame->nCursor", "pFrame->nMem", "pFrame->nOnceFlag", "pFrame->nOp", "pFrame->pc", "pFrame->pParent", "pFrame->pParent;", "pFrame->token", "pFrame->token!=t;", "pFrame->v", "pFrame;", "pFrame=pFrame->pParent);", "pFree);", "pgno==MASTER_ROOT+1", "picking", "pIdxKey", "pIdxKey);", "pIdxKey,", "pIdxKey->default_rc", "pIdxKey==0", "pIn1!=pOut", "pIn1++;", "pIn1->flags", "pIn1->flags&MEM_Int", "pIn1->flags;", "pIn1->flags==MEM_Int", "pIn1->n", "pIn1->n);", "pIn1->u.i", "pIn1->u.i;", "pIn1->u.i<0", "pIn1->u.i<p->nOp", "pIn1->u.i<pIn2->u.i){", "pIn1->u.i==0", "pIn1->u.i>0", "pIn1->u.i>0,", "pIn1->u.i>=0", "pIn1->xDel", "pIn1->z,", "pIn1->zMalloc", "pIn1<=&aMem[(p->nMem-p->nCursor)]", "pIn2->flags", "pIn2->flags)", "pIn2->flags;", "pIn2->n);", "pIn2->n;", "pIn2->u.i);", "pIn2->u.i;", "pIn2->z,", "pIn2->z;", "pIn3->flags", "pIn3->flags&MEM_Int", "pIn3->flags;", "pIn3->n,", "pIn3->r<(double)iKey", "pIn3->r>(double)iKey", "pIn3->u.i);", "pIn3->u.i;", "pIn3->z,", "pKey->flags", "pKey->u.i;", "pKeyInfo", "pKeyInfo!=0", "pKeyInfo,", "pKeyInfo->aColl[i];", "pKeyInfo->aSortOrder[i];", "pKeyInfo->db==db", "pKeyInfo->enc==ENC(db)", "pKeyInfo->nField+pKeyInfo->nXField;", "pKeyInfo;", "playing", "pMem!=pEnd;", "pMem++){", "pMem->db", "pMem->enc)==0", "pMem->enc)==SQLITE_OK", "pMem->flags", "pMem->flags.", "pMem->flags;", "pMem->n);", "pMem->n++;", "pMem->n,", "pMem->r", "pMem->u.i", "pMem->u.i==MAX_ROWID", "pMem->z[i];", "pMem->z[j];", "pModule", "pModule);", "pModule->xClose(pVtabCursor);", "pModule->xColumn", "pModule->xColumn(pCur->pVtabCursor,", "pModule->xEof(pCur->pVtabCursor);", "pModule->xEof(pVtabCursor);", "pModule->xFilter(pVtabCursor,", "pModule->xNext", "pModule->xNext(pCur->pVtabCursor);", "pModule->xOpen(pVtab,", "pModule->xRowid", "pModule->xRowid(pC->pVtabCursor,", "pModule->xUpdate(pVtab,", "pName);", "pName->enc==SQLITE_UTF16BE", "pName->enc==SQLITE_UTF16LE", "pName->enc==SQLITE_UTF8", "pName->flags", "pName->z);", "pnErr->u.i", "pNew->nDeferredCons", "pNew->nDeferredImmCons", "pNew->pNext", "pNew->zName", "pointed", "pointer", "Pointer", "pointing", "pointing.", "points.", "pOp->cnt++;", "pOp->cycles", "pOp->opcode", "pOp->opcode!=OP_Next", "pOp->opcode!=OP_NextIfOpen", "pOp->opcode!=OP_NoConflict", "pOp->opcode!=OP_Prev", "pOp->opcode!=OP_PrevIfOpen", "pOp->opcode!=OP_RowData", "pOp->opcode;", "pOp->opcode<OP_IdxLT", "pOp->opcode==OP_And", "pOp->opcode==OP_CreateTable", "pOp->opcode==OP_Eq", "pOp->opcode==OP_Explain", "pOp->opcode==OP_Found", "pOp->opcode==OP_IdxGE", "pOp->opcode==OP_IdxGT", "pOp->opcode==OP_IdxLE", "pOp->opcode==OP_IdxLT", "pOp->opcode==OP_IfNot", "pOp->opcode==OP_Insert", "pOp->opcode==OP_InsertInt", "pOp->opcode==OP_Ne", "pOp->opcode==OP_NoConflict", "pOp->opcode==OP_Noop", "pOp->opcode==OP_OpenRead", "pOp->opcode==OP_OpenWrite", "pOp->opcode==OP_ReopenIdx", "pOp->opcode==OP_RowData", "pOp->opflags", "pOp->opflags==sqlite3OpcodeProperty[pOp->opcode]", "pOp->p1", "pOp->p1)", "pOp->p1);", "pOp->p1+pOp->p2<=(p->nMem-p->nCursor)+1", "pOp->p1,", "pOp->p1;", "pOp->p1<=(p->nMem-p->nCursor)", "pOp->p1<=p->nVar", "pOp->p1<db->nDb", "pOp->p1<p->nCursor", "pOp->p1<p->nOnceFlag", "pOp->p1==1", "pOp->p1==SQLITE_OK", "pOp->p1>0", "pOp->p1>=0", "pOp->p1>db->aLimit[SQLITE_LIMIT_LENGTH]", "pOp->p2", "pOp->p2!=0", "pOp->p2)", "pOp->p2);", "pOp->p2+n<=(p->nMem-p->nCursor)+1)", "pOp->p2+nField<=(p->nMem-p->nCursor)+1", "pOp->p2+pOp->p3<=(p->nMem-p->nCursor)+1", "pOp->p2,", "pOp->p2-1;", "pOp->p2;", "pOp->p2<=(p->nMem-p->nCursor)", "pOp->p2<p->nOp", "pOp->p2<SQLITE_N_BTREE_META", "pOp->p2==0", "pOp->p2==1", "pOp->p2==BTREE_FILE_FORMAT", "pOp->p2==BTREE_SCHEMA_VERSION", "pOp->p2==OE_Ignore", "pOp->p2==SQLITE_CHECKPOINT_FULL", "pOp->p2==SQLITE_CHECKPOINT_PASSIVE", "pOp->p2==SQLITE_CHECKPOINT_RESTART", "pOp->p2>0", "pOp->p2>=0", "pOp->p3", "pOp->p3,", "pOp->p3-pOp->p2;", "pOp->p3;", "pOp->p3<=(p->nMem-p->nCursor)", "pOp->p3<=pFrame->nMem", "pOp->p3<p->nOp", "pOp->p3<pOp->p1", "pOp->p3<pOp->p2", "pOp->p3<SQLITE_N_BTREE_META", "pOp->p3==0", "pOp->p3>0", "pOp->p3>=0", "pOp->p3>=pOp->p1+pOp->p2", "pOp->p3>=pOp->p2+n", "pOp->p4.ai", "pOp->p4.ai;", "pOp->p4.i;", "pOp->p4.i==0", "pOp->p4.i>0", "pOp->p4.pColl);", "pOp->p4.pColl==0", "pOp->p4.pFunc);", "pOp->p4.pFunc;", "pOp->p4.pI64!=0", "pOp->p4.pKeyInfo)!=0", "pOp->p4.pKeyInfo;", "pOp->p4.pMem,", "pOp->p4.pProgram;", "pOp->p4.pVtab->bConstraint", "pOp->p4.pVtab->pVtab;", "pOp->p4.pVtab;", "pOp->p4.xAdvance(pC->pCursor,", "pOp->p4.xAdvance==sqlite3BtreeNext", "pOp->p4.xAdvance==sqlite3BtreePrevious", "pOp->p4.xAdvance==sqlite3BtreePrevious);", "pOp->p4.z", "pOp->p4.z!=0", "pOp->p4.z);", "pOp->p4.z,", "pOp->p4.z;", "pOp->p4.z==0", "pOp->p4.z==p->azVar[pOp->p1-1]", "pOp->p4type", "pOp->p4type!=P4_KEYINFO;", "pOp->p4type==P4_COLLSEQ", "pOp->p4type==P4_DYNAMIC", "pOp->p4type==P4_FUNCDEF", "pOp->p4type==P4_INT32", "pOp->p4type==P4_INTARRAY", "pOp->p4type==P4_KEYINFO", "pOp->p4type==P4_MEM", "pOp->p4type==P4_VTAB", "pOp->p5", "pOp->p5)", "pOp->p5);", "pOp->p5,", "pOp->p5;", "pOp->p5<=4", "pOp->p5<ArraySize(p->aCounter)", "pOp->p5<db->nDb", "pOp->p5==0", "pOp->p5==1", "pOp->p5==2", "pOp->p5==3", "pOp->p5==4", "pOp->p5==OE_Abort", "pOp->p5==OE_Fail", "pOp->p5==OE_Ignore", "pOp->p5==OE_Replace", "pOp->p5==OE_Rollback", "pOp->p5>=1", "pOp>aOp", "pOp>p->aOp", "pOp[-1].opcode==OP_CollSeq", "pOp[-1].p1;", "pOp[-1].p4.pColl;", "pOp[-1].p4type==P4_COLLSEQ", "portion", "position", "positioned", "positive", "positive).", "positive,", "possible", "possible,", "possible.", "pOut!=pIn1", "pOut!=pIn2", "pOut++;", "pOut->enc", "pOut->flags", "pOut->flags==MEM_Null", "pOut->n", "pOut->n;", "pOut->pScopyFrom", "pOut->pScopyFrom<&aMem[p1+pOp->p3]", "pOut->pScopyFrom==0", "pOut->pScopyFrom>=&aMem[p1]", "pOut->r", "pOut->u.i", "pOut->u.nZero", "pOut->xDel", "pOut->z", "pOut->z);", "pOut->z;", "pOut->z[nByte+1]", "pOut->z[nByte]=0;", "pOut->zMalloc", "pOut->zMalloc;", "pOut->zMalloc==pOut->z", "pOut<=&aMem[(p->nMem-p->nCursor)]", "pOut==pIn2)", "pProgram", "pProgram->aOp;", "pProgram->nCsr", "pProgram->nCsr;", "pProgram->nCsr==pFrame->nChildCsr", "pProgram->nMem", "pProgram->nMem+pProgram->nCsr==pFrame->nChildMem", "pProgram->nOnce", "pProgram->nOnce;", "pProgram->nOp;", "pProgram->nOp>0", "pProgram->token;", "pQuery);", "practices", "pragma.", "pRec++){", "pRec->enc;", "pRec->flags", "pRec->n,", "pRec->r", "pRec->u.i", "pRec->u.nZero;", "pRec<=pLast", "precompiled", "preferred,", "prefix.", "pReg->flags", "pReg->n;", "prepared", "preparing", "prerequisite", "present", "present),", "Presumably,", "prevents", "PrevIfOpen", "Previous", "previous", "previously", "PRIMARY", "probabilistic", "problems", "problems.", "problems.)", "procedure", "procedure.", "procedures", "process", "processes", "Processing", "processing", "production", "program", "Program", "program,", "program.", "programs", "Programs", "programs.", "progress", "prohibits", "provide", "provided", "provides", "pRt->flags", "pRt->u.pFrame", "pRt->u.pFrame;", "pSavepoint", "pSavepoint);", "pSavepoint->nDeferredCons;", "pSavepoint->nDeferredImmCons;", "pSavepoint->pNext", "pSavepoint->pNext;", "pSavepoint->pNext==0", "pSavepoint==db->pSavepoint", "pseudo-cursor", "pseudo-table", "pseudo-table.", "PseudoTable", "PseudoTables", "pseudotables", "pTmp->pNext;", "publicly,", "purposes", "purposes:", "putVarint32(&zNewRecord[i],", "putVarint32(zNewRecord,", "pVdbe->bIsReader", "pVdbe->inVtabMethod<2", "pVdbe->magic==VDBE_MAGIC_RUN", "pVdbe->pc>=0", "pVdbe->pNext){", "pVtab);", "pVTab);", "pVtab->pModule->xRename", "pVtab->pModule->xRename(pVtab,", "pVtab->pModule;", "pVTab->pVtab);", "pVtabCursor", "pVtabCursor->pVtab", "pVtabCursor->pVtab;", "pVtabCursor;", "r(P1)..r(P1+P2-1)", "R-07677-41881", "R-12275-61338", "R-24505-23230", "R-29538-34987", "R-38219-53002", "R-40812-03570", "R-61914-48074", "r.aMem[ii].flags", "r.default_rc", "r.default_rc==+1", "r.default_rc==-1", "r.nField", "r.pKeyInfo", "r[P1@P3]", "r[P1]!=NULL", "r[P1]!=r[P3]", "r[P1]+=P3,", "r[P1]<0", "r[P1]<=r[P3]", "r[P1]<r[P3]", "r[P1]==0", "r[P1]==NULL", "r[P1]==r[P3]", "r[P1]=max(r[P1],r[P2])", "r[P1]=NULL", "r[P1]=r[P1]+P2", "r[P1]>0", "r[P1]>=r[P3]", "r[P1]>r[P3]", "r[P2..P3]=NULL", "r[P2@P3+1]=r[P1@P3+1]", "r[P2@P3]", "r[P2@P3]=r[P1@P3]", "r[P2]='P4'", "r[P2]=count()", "r[P2]=cursor[P1].ctr++", "r[P2]=data", "r[P2]=key", "r[P2]=P1", "r[P2]=P4", "r[P2]=parameter(P1,P4)", "r[P2]=r[P1]", "r[P2]=root", "r[P2]=rowid", "r[P3]=(r[P1]", "r[P3]=func(r[P2@P5])", "r[P3]=mkrec(r[P1@P2])", "r[P3]=null", "r[P3]=PX", "r[P3]=r[P1]&r[P2]", "r[P3]=r[P1]*r[P2]", "r[P3]=r[P1]+r[P2]", "r[P3]=r[P1]|r[P2]", "r[P3]=r[P2]%r[P1]", "r[P3]=r[P2]+r[P1]", "r[P3]=r[P2]-r[P1]", "r[P3]=r[P2]/r[P1]", "r[P3]=r[P2]<<r[P1]", "r[P3]=r[P2]>>r[P1]", "r[P3]=rowset(P1)", "r[P3]=vcolumn(P2)", "rA==(double)0", "RAISE()", "rc!=SQLITE_IOERR_NOMEM", "rc!=SQLITE_OK", "rc==SQLITE_BUSY", "rc==SQLITE_DONE", "rc==SQLITE_ERROR", "rc==SQLITE_IOERR_NOMEM", "rc==SQLITE_NOMEM", "rc==SQLITE_OK", "rc==SQLITE_OK;", "rc==SQLITE_TOOBIG", "re-entrant", "reached", "reaches", "reaching", "read-lock", "read-only", "read-only.", "read-transaction", "read/write", "readability.", "ReadCookie", "reading", "readlock", "ReadOpen", "RealAffinity", "reasons:", "recommended", "record,", "record.", "records", "recursive", "redundant", "referred", "reg(P1)", "Reg(P1)", "reg(P1),", "reg(P1)..reg(P1+P3-1)", "reg(P1+1),", "reg(P1+2),", "reg(P2)..reg(P2+P3-1)", "reg(P3)", "reg(P3)<reg(P1)", "Regardless", "regardless", "register", "Register", "register,", "register.", "REGISTER_TRACE(p1+idx,", "REGISTER_TRACE(p2++,", "REGISTER_TRACE(p2+idx,", "REGISTER_TRACE(pOp->p1+i,", "REGISTER_TRACE(pOp->p1,", "REGISTER_TRACE(pOp->p2+i,", "REGISTER_TRACE(pOp->p2+pOp->p3-n,", "REGISTER_TRACE(pOp->p2,", "REGISTER_TRACE(pOp->p3+ii,", "REGISTER_TRACE(pOp->p3,", "REGISTER_TRACE(R,M)", "registers", "Registers", "registers.", "registerTrace(int", "registerTrace(pOp->p2,", "registerTrace(pOp->p3,", "regression", "reinterpreted", "RELEASE", "release", "RELEASE,", "released", "released.", "releases", "Remainder", "remainder", "remaining", "remaining.", "remains", "removed", "removes", "ReopenIdx", "reported", "reported.", "Reposition", "reprepare", "representation", "representation.", "representing", "requested", "require", "required", "required,", "required.", "required...", "res!=0;", "res<=0;", "res==0;", "res>=0;", "ResetCount", "resetSchemaOnFault", "resetSchemaOnFault-1);", "resetSchemaOnFault==0", "resetSchemaOnFault==iDb+1", "resetSchemaOnFault>0", "ResetSorter", "resources", "respectively.", "responsible", "RESTART.", "restored", "restored.", "result.", "ResultRow", "results", "Results", "results.", "retained", "retrieve", "return.", "return;", "returned", "returned.", "returning", "returning.", "returns", "reverse", "revised", "Rewind.", "rewinding", "rollback", "ROLLBACK", "ROLLBACK,", "root-page", "root=P2", "rootpage", "rootpage,", "ROUND8(sizeof(VdbeCursor))", "ROUND8(sizeof(VdbeFrame))", "routine", "routine.", "routines.", "RowData", "rowset(P1)", "rowset(P1)=r[P2]", "RowSetAdd", "RowSetRead", "RowSetTest", "running,", "runtime", "runtime.", "rValue;", "safety.", "Savepoint", "savepoint", "savepoint,", "savepoint.", "savepoint:", "SAVEPOINT_BEGIN,", "SAVEPOINT_RELEASE);", "savepoints", "savepoints.", "scanning", "schema,", "schema-cookie", "schema.", "SCHEMA_TABLE(iDb);", "sContext.isError", "sContext.isError;", "sContext.s", "sContext;", "scripts", "searches", "SeekGe,", "SeekGE,", "SeekGt,", "SeekGT,", "SeekLE,", "SeekLt,", "SeekLT,", "seekResult", "seekResult;", "segfault.", "separate", "September", "sequence", "Sequence", "sequences", "sequential", "sequentially.", "serial_type", "serial_type);", "serial_type;", "serial_type<=127", "serial_type==127", "serial_type==128", "serialized", "SetCookie", "shallow", "shared-cache", "shared-memory", "shifting", "ShiftLeft", "ShiftRight", "Sign-extend", "significant", "significant.", "silence", "similar", "simulate", "sizeof(aTempRec),", "sizeof(iA));", "sizeof(int)*(nRoot+1)", "sizeof(Mem)", "sizeof(Mem));", "sizeof(Mem)*4", "sizeof(Savepoint)+nName+1);", "sizeof(sContext));", "sizeof(sMem));", "sizeof(u8);", "sizeof(uA));", "sizeof(VdbeCursor", "sizeof(VdbeCursor));", "skipped", "smaller", "smallest", "sMem.flags", "sMem.z;", "sMem.z==sMem.zMalloc", "sMem.zMalloc", "sMem.zMalloc;", "SoftNull", "something", "Sometimes", "sometimes", "Sometimes,", "SorterCompare", "SorterData", "SorterOpen", "sorting", "Sorting", "spaces.", "special", "specifically", "specifically,", "specified", "specifies", "sprintf().", "sqlite3", "sqlite3.aDb[]", "sqlite3.flags", "sqlite3.nTransaction", "sqlite3.pSavepoint.", "sqlite3_bind_parameter_name().", "sqlite3_changes()).", "sqlite3_column_text()", "sqlite3_column_text16()", "sqlite3_context", "sqlite3_exec()", "sqlite3_exec(),", "sqlite3_exec(db,", "sqlite3_file_control(db,", "sqlite3_finalize().", "sqlite3_found_count", "sqlite3_found_count++;", "sqlite3_free);", "sqlite3_interrupt()", "sqlite3_interrupt(db);", "sqlite3_interrupt_count", "sqlite3_interrupt_count--;", "sqlite3_interrupt_count==0", "sqlite3_interrupt_count>0", "sqlite3_last_insert_rowid()", "sqlite3_log(pOp->p1,", "sqlite3_log(rc,", "sqlite3_max_blobsize", "sqlite3_module", "sqlite3_prepare_v2())", "sqlite3_randomness(sizeof(v),", "sqlite3_release_memory()", "sqlite3_reset(),", "sqlite3_result_XXX()", "sqlite3_search_count", "sqlite3_search_count++;", "sqlite3_search_count--;", "sqlite3_set_auxdata()", "sqlite3_snprintf(100,", "sqlite3_snprintf(100,&zBuf[k],", "sqlite3_sort_count", "sqlite3_sort_count++;", "sqlite3_sql().", "sqlite3_step()", "sqlite3_step().", "sqlite3_stmt", "sqlite3_trace())", "sqlite3_value", "sqlite3_value*,", "sqlite3_value_numeric_type(sqlite3_value", "sqlite3_value_text(&ctx.s));", "sqlite3_value_text(pMem));", "sqlite3_value_type(pVal);", "sqlite3_vtab", "sqlite3_vtab_cursor", "sqlite3AddInt64(&iB,iA)", "sqlite3AnalysisLoad(db,", "sqlite3AtoF(pMem->z,", "sqlite3AtoF(pRec->z,", "sqlite3Atoi64(pMem->z,", "sqlite3BeginBenignMalloc();", "sqlite3BtreeBeginStmt(pBt,", "sqlite3BtreeBeginTrans(pBt,", "sqlite3BtreeBeginTrans(pCx->pBt,", "sqlite3BtreeClearCursor(pC->pCursor);", "sqlite3BtreeClearTable(", "sqlite3BtreeClearTableOfCursor(pC->pCursor);", "sqlite3BtreeCount(pCrsr,", "sqlite3BtreeCreateTable()", "sqlite3BtreeCreateTable(pCx->pBt,", "sqlite3BtreeCreateTable(pDb->pBt,", "sqlite3BtreeCursor()", "sqlite3BtreeCursor(pCx->pBt,", "sqlite3BtreeCursor(pX,", "sqlite3BtreeCursorHints(pCur->pCursor,", "sqlite3BtreeCursorIsValid(pC->pCursor)", "sqlite3BtreeCursorIsValid(pCrsr)", "sqlite3BtreeCursorZero(pCx->pCursor);", "sqlite3BtreeData(pCrsr,", "sqlite3BtreeDataFetch(pCrsr,", "sqlite3BtreeDataSize(pCrsr,", "sqlite3BtreeDelete(pC->pCursor);", "sqlite3BtreeDelete(pCrsr);", "sqlite3BtreeDropTable(db->aDb[iDb].pBt,", "sqlite3BtreeEof(pC->pCursor);", "sqlite3BtreeFirst(pCrsr,", "sqlite3BtreeGetMeta(db->aDb[iDb].pBt,", "sqlite3BtreeGetMeta(pBt,", "sqlite3BtreeHoldsMutex(db->aDb[iDb].pBt)", "sqlite3BtreeIncrVacuum(pBt);", "sqlite3BtreeInsert(pC->pCursor,", "sqlite3BtreeInsert(pCrsr,", "sqlite3BtreeIntegrityCheck(db->aDb[pOp->p5].pBt,", "sqlite3BtreeIsInTrans(pBt)", "sqlite3BtreeIsInTrans(pBt)==0", "sqlite3BtreeKey(pCrsr,", "sqlite3BtreeKeyFetch(pCrsr,", "sqlite3BtreeKeySize(pC->pCursor,", "sqlite3BtreeKeySize(pCrsr,", "sqlite3BtreeLast()", "sqlite3BtreeLast(pC->pCursor,", "sqlite3BtreeLast(pCrsr,", "sqlite3BtreeLastPage(db->aDb[pOp->p1].pBt);", "sqlite3BtreeLastPage(pBt);", "sqlite3BtreeLockTable(db->aDb[p1].pBt,", "sqlite3BtreeMaxPageCount(pBt,", "sqlite3BtreeMovetoUnpacked(pC->pCursor,", "sqlite3BtreeMovetoUnpacked(pCrsr,", "sqlite3BtreeNext().", "sqlite3BtreeNext(pC->pCursor,", "sqlite3BtreeOpen(db->pVfs,", "sqlite3BtreePager(pBt);", "sqlite3BtreeParseCellPtr()", "sqlite3BtreePrevious().", "sqlite3BtreePrevious(pC->pCursor,", "sqlite3BtreeSavepoint(db->aDb[ii].pBt,", "sqlite3BtreeSetVersion(pBt,", "sqlite3BtreeTripAllCursors(db->aDb[ii].pBt,", "sqlite3BtreeUpdateMeta(pDb->pBt,", "sqlite3Checkpoint(db,", "sqlite3CloseSavepoints(db);", "sqlite3DbFree(db,", "sqlite3DbMallocRaw(db,", "sqlite3DbMallocZero(db,", "sqlite3DbStrDup(db,", "sqlite3EndBenignMalloc();", "sqlite3ErrStr(rc));", "sqlite3ExpirePreparedStatements(db);", "sqlite3GetFuncCollSeq(),", "sqlite3GetVarint32(zHdr,", "sqlite3GlobalConfig.xLog!=0", "sqlite3GlobalConfig.xVdbeBranch(sqlite3GlobalConfig.pVdbeBranchArg,", "sqlite3GlobalConfig.xVdbeBranch==0", "sqlite3Hwtime();", "sqlite3InitCallback().", "sqlite3InitCallback,", "sqlite3IsNaN(rB)", "sqlite3MemCompare(&aMem[p1+idx],", "sqlite3MemCompare(pIn3,", "sqlite3MPrintf(db,", "sqlite3MulInt64(&iB,iA)", "sqlite3PagerCloseWal(pPager);", "sqlite3PagerFilename(pPager,", "sqlite3PagerGetJournalMode(pPager);", "sqlite3PagerSetJournalMode(pPager,", "sqlite3ResetAllSchemasOfConnection(db);", "sqlite3ResetOneSchema(db,", "sqlite3RollbackAll(db,", "sqlite3RootPageMoved(db,", "sqlite3RowSetInsert(pIn1->u.pRowSet,", "sqlite3RowSetNext(pIn1->u.pRowSet,", "sqlite3RowSetTest(pIn1->u.pRowSet,", "sqlite3RunVacuum(&p->zErrMsg,", "sqlite3SchemaMutexHeld(db,", "sqlite3SetString(&p->zErrMsg,", "sqlite3StrICmp(pSavepoint->zName,", "sqlite3Strlen30(&zBuf[k]);", "sqlite3Strlen30(pOp->p4.z);", "sqlite3Strlen30(pOut->z);", "sqlite3Strlen30(zCsr);", "sqlite3Strlen30(zName);", "sqlite3SubInt64(&iB,iA)", "sqlite3UnlinkAndDeleteIndex(db,", "sqlite3UnlinkAndDeleteTable(db,", "sqlite3UnlinkAndDeleteTrigger(db,", "sqlite3ValueApplyAffinity(", "sqlite3VarintLen(nHdr);", "sqlite3VarintLen(serial_type);", "sqlite3VdbeAllocUnpackedRecord(", "sqlite3VdbeChangeEncoding(&ctx.s,", "sqlite3VdbeChangeEncoding(&sContext.s,", "sqlite3VdbeChangeEncoding(pIn1,", "sqlite3VdbeChangeEncoding(pMem,", "sqlite3VdbeChangeEncoding(pName,", "sqlite3VdbeChangeEncoding(pOut,", "sqlite3VdbeCheckFk(p,", "sqlite3VdbeCheckMemInvariants(&aMem[pOp->p1])", "sqlite3VdbeCheckMemInvariants(&aMem[pOp->p2])", "sqlite3VdbeCheckMemInvariants(&aMem[pOp->p3])", "sqlite3VdbeCheckMemInvariants(pDest)", "sqlite3VdbeCloseStatement(p,", "sqlite3VdbeCursorMoveto()", "sqlite3VdbeCursorMoveto(pC);", "sqlite3VdbeDeleteAuxData(p,", "sqlite3VdbeEnter(p);", "sqlite3VdbeExec(", "sqlite3VdbeExec()", "sqlite3VdbeExpandSql(p,", "sqlite3VdbeFrameRestore(pFrame);", "sqlite3VdbeFreeCursor(p,", "sqlite3VdbeHalt(p);", "sqlite3VdbeHalt(p)==SQLITE_BUSY", "sqlite3VdbeIdxKeyCompare(pC,", "sqlite3VdbeIdxRowid(db,", "sqlite3VdbeIntegerAffinity(pOut);", "sqlite3VdbeIntegerAffinity(pRec);", "sqlite3VdbeIntValue(pIn1)!=0;", "sqlite3VdbeIntValue(pIn1);", "sqlite3VdbeIntValue(pIn2)!=0;", "sqlite3VdbeIntValue(pIn2);", "sqlite3VdbeIntValue(pIn3);", "sqlite3VdbeIOTraceSql(p);", "sqlite3VdbeLeave(p);", "sqlite3VdbeMemAboutToChange(P,M)", "sqlite3VdbeMemExpandBlob(pRec);", "sqlite3VdbeMemFinalize(pMem,", "sqlite3VdbeMemFromBtree()", "sqlite3VdbeMemFromBtree(pCrsr,", "sqlite3VdbeMemGrow()", "sqlite3VdbeMemGrow(pOut,", "sqlite3VdbeMemIntegerify(pIn1);", "sqlite3VdbeMemIntegerify(pIn2);", "sqlite3VdbeMemIntegerify(pIn3);", "sqlite3VdbeMemIntegerify(pMem);", "sqlite3VdbeMemMakeWriteable(P)", "sqlite3VdbeMemMove(&sContext.s,", "sqlite3VdbeMemMove(&sMem,", "sqlite3VdbeMemMove(pDest,", "sqlite3VdbeMemNulTerminate(&pMem[i]);", "sqlite3VdbeMemNumerify(pIn1);", "sqlite3VdbeMemPrettyPrint(Mem", "sqlite3VdbeMemPrettyPrint(p,", "sqlite3VdbeMemRealify(pIn1);", "sqlite3VdbeMemRelease(&ctx.s);", "sqlite3VdbeMemRelease(&sMem);", "sqlite3VdbeMemRelease(pRt);", "sqlite3VdbeMemSetInt64(&aMem[i],", "sqlite3VdbeMemSetInt64(&aMem[pOp->p1],", "sqlite3VdbeMemSetInt64(&aMem[pOp->p3],", "sqlite3VdbeMemSetInt64(pMem,", "sqlite3VdbeMemSetInt64(pOut,", "sqlite3VdbeMemSetNull(pDest);", "sqlite3VdbeMemSetNull(pIn1);", "sqlite3VdbeMemSetNull(pOut);", "sqlite3VdbeMemSetRowSet(pIn1);", "sqlite3VdbeMemSetStr(pIn1,", "sqlite3VdbeMemSetStr(pOut,", "sqlite3VdbeMemShallowCopy(pDest,", "sqlite3VdbeMemShallowCopy(pOut,", "sqlite3VdbeMemStringify(P,enc))", "sqlite3VdbeMemStringify(pRec,", "sqlite3VdbeMemTooBig(pDest)", "sqlite3VdbeMemTooBig(pMem)", "sqlite3VdbeMemTooBig(pOut)", "sqlite3VdbeMemTooBig(pVar)", "sqlite3VdbePrintOp(stdout,", "sqlite3VdbePrintSql(p);", "sqlite3VdbeRealValue(pIn1)!=0.0;", "sqlite3VdbeRealValue(pIn1);", "sqlite3VdbeRealValue(pIn2);", "sqlite3VdbeRecordUnpack(pC->pKeyInfo,", "sqlite3VdbeSerialGet(pC->aRow+aOffset[p2],", "sqlite3VdbeSerialGet(zData,", "sqlite3VdbeSerialPut(&zNewRecord[j],", "sqlite3VdbeSerialType()).", "sqlite3VdbeSerialType(pRec,", "sqlite3VdbeSerialTypeLen(serial_type);", "sqlite3VdbeSerialTypeLen(t))==0", "sqlite3VdbeSerialTypeLen(t);", "sqlite3VdbeSetChanges(db,", "sqlite3VdbeSorterCompare(pC,", "sqlite3VdbeSorterInit(db,", "sqlite3VdbeSorterNext(db,", "sqlite3VdbeSorterReset(db,", "sqlite3VdbeSorterRewind(db,", "sqlite3VdbeSorterRowkey(pC,", "sqlite3VdbeSorterWrite(db,", "sqlite3VtabBegin(db,", "sqlite3VtabCallCreate(db,", "sqlite3VtabCallDestroy(db,", "sqlite3VtabImportErrmsg(p,", "sqlite3VtabSavepoint(db,", "SQLITE_32BIT_ROWID", "SQLITE_ABORT);", "SQLITE_ABORT.", "SQLITE_ABORT;", "SQLITE_ABORT_ROLLBACK);", "SQLITE_AFF_", "SQLITE_AFF_INTEGER,", "SQLITE_AFF_INTEGER:", "SQLITE_AFF_MASK", "SQLITE_AFF_MASK;", "SQLITE_AFF_NONE:", "SQLITE_AFF_NUMERIC,", "SQLITE_AFF_NUMERIC:", "SQLITE_AFF_REAL:", "SQLITE_AFF_TEXT,", "SQLITE_AFF_TEXT:", "SQLITE_BUSY", "SQLITE_BUSY;", "SQLITE_CHECKPOINT_PASSIVE,", "SQLITE_CORRUPT", "SQLITE_CORRUPT_BKPT;", "SQLITE_CountRows", "SQLITE_DEBUG", "SQLITE_DeferFKs", "SQLITE_DELETE,", "SQLITE_DONE;", "SQLITE_ERROR", "SQLITE_ERROR;", "SQLITE_FCNTL_TRACE,", "SQLITE_FULL", "SQLITE_FULL;", "SQLITE_FUNC_NEEDCOLL", "SQLITE_INSERT", "SQLITE_INSERT);", "sqlite_int64", "SQLITE_InternChanges);", "SQLITE_InternChanges;", "SQLITE_INTERRUPT;", "SQLITE_JUMPIFNULL", "SQLITE_JUMPIFNULL)==0", "SQLITE_LOCKED.", "SQLITE_LOCKED;", "SQLITE_MASTER", "SQLITE_MAX_LENGTH", "SQLITE_MAX_U32)==(u64)payloadSize64", "SQLITE_MISMATCH", "SQLITE_MISMATCH;", "SQLITE_NOMEM;", "SQLITE_NULLEQ", "SQLITE_NULLEQ)?2:3);", "SQLITE_OK", "SQLITE_OK!=(rc", "SQLITE_OK!=sqlite3VdbeChangeEncoding(pOut,", "SQLITE_OK.", "SQLITE_OK;", "SQLITE_OK==rc", "SQLITE_OK==sqlite3VdbeMemGrow(pMem,", "SQLITE_OMIT_AUTOINCREMENT", "SQLITE_OMIT_AUTOVACUUM", "SQLITE_OMIT_BTREECOUNT", "SQLITE_OMIT_CAST", "SQLITE_OMIT_FLOATING_POINT", "SQLITE_OMIT_FLOATING_POINT...", "SQLITE_OMIT_FOREIGN_KEY", "SQLITE_OMIT_INTEGRITY_CHECK", "SQLITE_OMIT_PAGER_PRAGMAS", "SQLITE_OMIT_PRAGMA", "SQLITE_OMIT_PROGRESS_CALLBACK", "SQLITE_OMIT_SHARED_CACHE", "SQLITE_OMIT_TRACE", "SQLITE_OMIT_TRIGGER", "SQLITE_OMIT_UTF16", "SQLITE_OMIT_VIRTUALTABLE", "SQLITE_OMIT_WAL", "SQLITE_OPEN_CREATE", "SQLITE_OPEN_DELETEONCLOSE", "SQLITE_OPEN_EXCLUSIVE", "SQLITE_OPEN_READWRITE", "SQLITE_OPEN_TRANSIENT_DB;", "SQLITE_QueryOnly)!=0", "SQLITE_READONLY;", "SQLITE_ROW", "SQLITE_ROW;", "SQLITE_SCHEMA", "SQLITE_SCHEMA.", "SQLITE_SCHEMA;", "SQLITE_SqlTrace)!=0", "sqlite_stat1", "SQLITE_STATIC);", "SQLITE_STOREP2", "SQLITE_TEST", "SQLITE_TOOBIG;", "SQLITE_UPDATE", "SQLITE_USE_FCNTL_TRACE", "SQLITE_UTF8);", "SQLITE_UTF8,", "SQLITE_UTF8;", "SQLITE_VdbeEQP", "SQLITE_VdbeListing", "SQLITE_VdbeTrace", "sqliteInt.h.", "Started", "started", "started,", "started.", "starting", "statement", "statement,", "statement-transaction", "statement-transactions", "statement.", "statement.)", "statements", "statements.", "step(r[P2@P5])", "storage", "storing", "string,", "string.", "String8", "Stringify(P,", "Stringify(pIn1,", "Stringify(pIn2,", "strings", "Strings", "strings,", "struct)", "struct.", "structure", "structure,", "structure.", "structures", "sub-program", "Sub-program", "sub-program).", "sub-program.", "sub-programs", "sub-vdbe", "SubProgram", "SubProgram.aOp.", "SubProgram.nMem", "SubProgram.token", "subsequent", "substitute", "Subtract", "succeeded.", "success,", "successful", "successful,", "successive", "successors.", "SUMMARY:", "support", "suppress", "switch(", "symbolic", "Synopsis:", "system.", "szField", "szField;", "table).", "table-name,", "TableLock", "tables,", "tables.", "temporary", "TEMPORARY", "terminate", "terminated", "terminates", "testcase(", "testing", "testing.", "therefore", "therefore,", "though,", "through", "through.", "throwing", "TK_AND,", "TK_BITAND,", "TK_BITNOT,", "TK_BITOR,", "TK_CONCAT,", "TK_FLOAT,", "TK_ISNULL,", "TK_LSHIFT,", "TK_MINUS,", "TK_NOT,", "TK_NOTNULL,", "TK_PLUS,", "TK_REM,", "TK_RSHIFT,", "TK_SLASH,", "TK_STAR,", "TK_STRING,", "TK_TO_BLOB,", "TK_TO_INT,", "TK_TO_NUMERIC,", "TK_TO_REAL,", "TK_TO_TEXT,", "ToNumeric", "too_big:", "too_big;", "top-level", "tracing", "transaction", "Transaction", "transaction,", "transaction.", "transactions.", "Transfer", "transfer", "transferred", "transformation,", "transformed", "transient", "transition", "trigger", "trigger,", "triggers", "triggers,", "truncate,", "turnOnAC", "turnOnAC;", "two-step", "typeof()", "typeof().", "Typically", "warning.", "whatever", "whenever", "whether", "whichever", "without", "working", "working.", "wrapper", "wrFlag,", "wrFlag;", "write-ahead-log", "write-transaction", "write-transaction.", "write=P3", "writing", "written", "xBestIndex", "xColumn", "xCreate", "xDestroy", "xFilter", "xFilter.", "xNext()", "xNext().", "xProgress()", "xRename", "xSavepoint())", "xSync()", "xUpdate", "xUpdate.", "zAffinity", "zAffinity!=0", "zAffinity[0]", "zAffinity[0]==0", "zAffinity[pOp->p2]==0", "zBuf[0]", "zBuf[1]", "zBuf[200];", "zBuf[k++]", "zData);", "zEndHdr", "zEndHdr)", "zero-blob", "zero-bytes", "zeroblobs", "zFilename", "zHdr++;", "zHdr<zEndHdr", "zHdr[0];", "zHdr[0]<0x80", "zLogFmt", "zLogFmt,", "zMalloc", "zMalloc;", "zMaster", "zMaster,", "zName);", "zNewRecord", "zNewRecord[]", "zplan='P4'", "zSql==0", "zTrace);", "zType!=0", "zType);", "~sqlite3VdbeIntValue(pIn1));"
  };

  uint32_t count = sizeof(dictionary) / sizeof(char *);
  auto strlens = new uint32_t[count];

  for (uint32_t i = 0; i < count; i++) {
    strlens[i] = strlen(dictionary[i]);
  }

  auto acc = ac_create(dictionary, strlens, count);

  int interval = 1000;
  chrono::seconds leadin_duration(1);
  chrono::seconds duration(10);

  size_t begins_sum = 0;
  size_t ends_sum = 0;
  size_t trials = 0;
  auto start = chrono::high_resolution_clock::now();
  while (true) {
    for (int i = 0; i < interval; i++) {
      auto res = ac_match(acc, bytes, bytes_len);
      begins_sum += res.match_begin;
      ends_sum += res.match_end;
      res = ac_match(acc, match_bytes, match_bytes_len);
      begins_sum += res.match_begin;
      ends_sum += res.match_end;
    }
    trials += interval;
    auto curr = chrono::high_resolution_clock::now();
    if (curr - start > leadin_duration) {
      break;
    }
  }

  begins_sum = 0;
  ends_sum = 0;
  trials = 0;
  start = chrono::high_resolution_clock::now();
  while (true) {
    for (int i = 0; i < interval; i++) {
      auto res = ac_match(acc, bytes, bytes_len);
      begins_sum += res.match_begin;
      ends_sum += res.match_end;
    }
    trials += interval;
    auto curr = chrono::high_resolution_clock::now();
    if (curr - start > duration) {
      break;
    }
  }

  printf("no match: %I64u trials in 10s\n", trials);

  begins_sum = 0;
  ends_sum = 0;
  trials = 0;
  start = chrono::high_resolution_clock::now();
  while (true) {
    for (int i = 0; i < interval; i++) {
      auto res = ac_match(acc, match_bytes, match_bytes_len);
      begins_sum += res.match_begin;
      ends_sum += res.match_end;
    }
    trials += interval;
    auto curr = chrono::high_resolution_clock::now();
    if (curr - start > duration) {
      break;
    }
  }

  printf("matching: %I64u trials in 10s\n", trials);

  return 0;
};
